// MyCustomHook.js

import React, { useState } from 'react';
import '../css/CharacterCounter.css';
import PropTypes from 'prop-types';

const MIN_LENGTH = 1;
const MAX_LENGTH = 200;

const useProcessing = (entryContent = '') => {
    const [content, setContent] = useState(entryContent);
    
    const handleChange = (e) => {
        setContent(e.target.value);
    }
        
    const trimmedContent = content.trim();
    const length = trimmedContent.length;
    
    const isContentValid = length >= MIN_LENGTH && length <= MAX_LENGTH;
    const isNearMaxLength = length <= MAX_LENGTH - 20;
    
    return {
                setContent,
                content,
                trimmedContent,
                isContentValid,
                length,
                isNearMaxLength,
                handleChange
            }
};

const Counter = ({ entryContent = '' }) => {
    const {
            length,
            isNearMaxLength
        } = useProcessing(entryContent);
   
            return (
                        <div
                            id="character-counter"
                            className={`character-counter ${isNearMaxLength ? 'warning' : ''}`}
                            aria-live="polite"
                            aria-label="Character count"
                        >
                            {length < MIN_LENGTH
                                ?  `Minimum ${MIN_LENGTH} characters`
                                : length >= MAX_LENGTH
                                ? `Maximum ${MAX_LENGTH} characters`
                                : `${length}/${MAX_LENGTH}`
                            }        
                        </div>
                    );
};

Counter.propTypes = {
    entryContent: PropTypes.string
};

export { MIN_LENGTH, MAX_LENGTH, useProcessing, Counter };

// MyExternalComponent.js

// import React from 'react'
// import { MIN_LENGTH, MAX_LENGTH, useProcessing, Counter } from './MyCustomHook';

// const MyExternalComponent = () => {
//     const entryContent = 'Hello World!';
//     const {
//             setContent,
//             content,
//             trimmedContent,
//             isContentValid,
//             length,
//             isNearMaxLength,
//             handleChange
//         } = useProcessing(entryContent);

//     return (
//         <>
//             <Counter entryContent={entryContent}/>
//         </>
//     );
// };

// export default MyExternalComponent;
